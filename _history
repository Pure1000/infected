{"entries":[{"timestamp":1744824708499,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s://developers.google.com/blockly/xml\"><variables><variable id=\"f`!EoZzA:%#.T)G3GX@T\">players</variable><variable id=\"oc6^1kw,kSg6iDRZ.H~s\">p</variable><variable id=\"s@YD[i(n2^7u+j3`DIR5\">q</variable><variable id=\"tUBVuzMd.-xxO/K[T!x_\">r</variable><variable id=\"RG(AqB(cgUW+$F)N!?ue\">patientZero</variable><variable id=\"P@^g+2h|ptqN=GW[rJa)\">state</variable><variable id=\"oP}b3fLr8k0@q$3Ca48I\">master</variable><variable id=\"H|a/qKiI0v-Pli_gFm`G\">paired</variable><variable id=\"jTdk-yz7sjt@1T(v6.F1\">signal</variable><variable id=\"#n2Y7zLX138^#G~KRp_u\">INCUBATION</variable><variable id=\";yXM)seV7yzH6[;.ilfg\">DEATH</variable><variable id=\":=rBa3NX(8R!O]-QtBZ;\">RSSI</variable><variable id=\"rZFIc$we+V_SBa4hL}{a\">TRANSMISSIONPROB</variable><variable id=\"1DBA}9Ai`G%zRSPOs+m}\">playerIcons</variable><variable id=\"4]xPamEl58:Z^uM;sk%^\">infectedBy</variable><variable id=\"x8PUy_|6dQ)u(H0{}-_@\">playerIcon</variable></variables><comment id=\"+zx)H6s(pIV+Ew`lroec\" x=\"20\" y=\"4233\" w=\"160\" h=\"120\" collapsed=\"true\">\nmaster state\n</comment><block type=\"pxt-on-start\" id=\"yFBcD`8O,F2Bl?_+!XVc\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\" id=\"OT8PT`}SK44_P@wo1Pee\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let infectedTime = 0\" numlines=\"1\" declaredvars=\"infectedTime\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">local time when infection happened</comment><next><block type=\"typescript_statement\" id=\"h:IPwQZYt2kWIPTnMAfD\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let paired = false\" numlines=\"1\" declaredvars=\"paired\"></mutation><comment pinned=\"false\" h=\"80\" w=\"160\">player state</comment><next><block type=\"typescript_statement\" id=\"^-^Mma/.ocW*2B2}$xOd\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let players: Player[] = []\" numlines=\"1\" declaredvars=\"players\"></mutation><next><block type=\"variables_set\" id=\"L;wEhEN}OIicm5Ux63cc\"><field name=\"VAR\" id=\"#n2Y7zLX138^#G~KRp_u\">INCUBATION</field><comment pinned=\"false\" h=\"80\" w=\"160\">time before showing symptoms</comment><data>0</data><value name=\"VALUE\"><shadow type=\"math_number\" id=\"%^V7mp{5A~R01t!djgYm\"><field name=\"NUM\">20000</field></shadow></value><next><block type=\"variables_set\" id=\".1{qY9e.ajGK.L^Ns9ib\"><field name=\"VAR\" id=\";yXM)seV7yzH6[;.ilfg\">DEATH</field><comment pinned=\"false\" h=\"80\" w=\"160\">time before dying off the disease</comment><value name=\"VALUE\"><shadow type=\"math_number\" id=\"]ZSZ=ix%!Ll?DY_f%p9o\"><field name=\"NUM\">40000</field></shadow></value><next><block type=\"variables_set\" id=\"d{ku?)Yv:*)90t_x5%et\"><field name=\"VAR\" id=\":=rBa3NX(8R!O]-QtBZ;\">RSSI</field><comment pinned=\"false\" h=\"80\" w=\"160\">db</comment><value name=\"VALUE\"><shadow type=\"math_number\" id=\"E|P9pfH+[/#ab?W4l;z/\"><field name=\"NUM\">-45</field></shadow></value><next><block type=\"variables_set\" id=\"57;wI%p$ku5ORY!lS[Fh\"><field name=\"VAR\" id=\"rZFIc$we+V_SBa4hL}{a\">TRANSMISSIONPROB</field><comment pinned=\"false\" h=\"80\" w=\"160\">% probability to transfer disease</comment><value name=\"VALUE\"><shadow type=\"math_number\" id=\"h:-:6?!]|7ivwo_*+9!`\"><field name=\"NUM\">40</field></shadow></value><next><block type=\"typescript_statement\" id=\"REMWP@KjH%OBYG_WqDEj\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum GameState {\" line1=\"    Stopped,\" line2=\"    Pairing,\" line3=\"    Infecting,\" line4=\"    Running,\" line5=\"    Over\" line6=\"}\" numlines=\"7\"></mutation><next><block type=\"typescript_statement\" id=\"qx82d=vk,G@)05tQXY_v\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum HealthState {\" line1=\"    Healthy,\" line2=\"    Incubating,\" line3=\"    Sick,\" line4=\"    Dead\" line5=\"}\" numlines=\"6\"></mutation><next><block type=\"typescript_statement\" id=\"$N/`$=+KJDQc%,*5{weZ\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"enum MessageKind {\" line1=\"    PairRequest,\" line2=\"    PairConfirmation,\" line3=\"    HealthSet,\" line4=\"    HealthValue,\" line5=\"    InitialInfect,\" line6=\"    TransmitVirus,\" line7=\"    GameState\" line8=\"}\" numlines=\"9\"></mutation><next><block type=\"typescript_statement\" id=\"|,7-@YNm9(j?a_E+(tY/\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"const GameIcons = {\" line1=\"    Pairing: IconNames.Ghost,\" line2=\"    Paired: IconNames.Happy,\" line3=\"    Dead: IconNames.Skull,\" line4=\"    Sick: IconNames.Sad,\" line5=\"    Incubating: IconNames.Confused,\" line6=\"    Healthy: IconNames.Happy\" line7=\"}\" numlines=\"8\" declaredvars=\"GameIcons\"></mutation><next><block type=\"typescript_statement\" id=\"G|4{u*)TZrHmOI!JFUKY\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Message {\" line1=\"\" line2=\"    private _data: Buffer\" line3=\"\" line4=\"    constructor(input?: Buffer) {\" line5=\"        this._data = input || control.createBuffer(13)\" line6=\"    }\" line7=\"\" line8=\"    get kind(): number {\" line9=\"        return this._data.getNumber(NumberFormat.Int8LE, 0)\" line10=\"    }\" line11=\"\" line12=\"    set kind(x: number) {\" line13=\"        this._data.setNumber(NumberFormat.Int8LE, 0, x)\" line14=\"    }\" line15=\"\" line16=\"    get fromSerialNumber(): number {\" line17=\"        return this._data.getNumber(NumberFormat.Int32LE, 1)\" line18=\"    }\" line19=\"\" line20=\"    set fromSerialNumber(x: number) {\" line21=\"        this._data.setNumber(NumberFormat.Int32LE, 1, x)\" line22=\"    }\" line23=\"\" line24=\"    get value(): number {\" line25=\"        return this._data.getNumber(NumberFormat.Int32LE, 5)\" line26=\"    }\" line27=\"\" line28=\"    set value(x: number) {\" line29=\"        this._data.setNumber(NumberFormat.Int32LE, 5, x)\" line30=\"    }\" line31=\"\" line32=\"    get toSerialNumber(): number {\" line33=\"        return this._data.getNumber(NumberFormat.Int32LE, 9)\" line34=\"    }\" line35=\"\" line36=\"    set toSerialNumber(x: number) {\" line37=\"        this._data.setNumber(NumberFormat.Int32LE, 9, x)\" line38=\"    }\" line39=\"\" line40=\"    send() {\" line41=\"        radio.sendBuffer(this._data)\" line42=\"        basic.pause(250)\" line43=\"    }\" line44=\"}\" numlines=\"45\"></mutation><next><block type=\"variables_set\" id=\"D#xNr;1Vrc)n|42_#gCw\"><field name=\"VAR\" id=\"1DBA}9Ai`G%zRSPOs+m}\">playerIcons</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"rZIS`_V_oVeN|g1B0u*U\"><field name=\"NUM\">0</field></shadow><block type=\"text\" id=\"#nsC8ztIzwIGw1}6v^_q\"><field name=\"TEXT\">ABCDEFGHIJKLMNOPQRSTUVWXYZ</field></block></value><next><block type=\"typescript_statement\" id=\"C#gS;,g2}vgfpX8cr~RP\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"class Player {\" line1=\"    id: number\" line2=\"    icon: number\" line3=\"    health: HealthState\" line4=\"    show() {\" line5=\"        basic.showString(playerIcons[this.icon])\" line6=\"    }\" line7=\"}\" numlines=\"8\"></mutation><next><block type=\"typescript_statement\" id=\":h_}BBemC(dF:t4V`XYr\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let state = GameState.Stopped\" numlines=\"1\" declaredvars=\"state\"></mutation><next><block type=\"typescript_statement\" id=\"SwQ?T!kb!lMis9?qSos`\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let patientZero: Player\" numlines=\"1\" declaredvars=\"patientZero\"></mutation><next><block type=\"variables_set\" id=\"!svl(.((c=X$~$|H~4@L\"><field name=\"VAR\" id=\"4]xPamEl58:Z^uM;sk%^\">infectedBy</field><comment pinned=\"false\" h=\"80\" w=\"160\">who infected (playerIcon)</comment><value name=\"VALUE\"><shadow type=\"math_number\" id=\"lsIor,BR9UEHeHr!`TDI\"><field name=\"NUM\">-1</field></shadow></value><next><block type=\"variables_set\" id=\"``;s.ZwVF}EKFPAJ4K@@\"><field name=\"VAR\" id=\"x8PUy_|6dQ)u(H0{}-_@\">playerIcon</field><comment pinned=\"false\" h=\"80\" w=\"160\">player icon and identity</comment><value name=\"VALUE\"><shadow type=\"math_number\" id=\"koNgV16Jgj=8x7ZS]svz\"><field name=\"NUM\">-1</field></shadow></value><next><block type=\"typescript_statement\" id=\";N_tp=+[O:1=WLXtU:}e\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let health = HealthState.Healthy\" numlines=\"1\" declaredvars=\"health\"></mutation><next><block type=\"radio_set_group\" id=\"Wlh1J5gZ3r`ZU0I|1%md\"><value name=\"ID\"><shadow type=\"math_number_minmax\" id=\"1#0fUcsR,#}4kVYc[b7J\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">42</field></shadow></value><next><block type=\"typescript_statement\" id=\"9]5M9N/bMSc1X|F$,xVi\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"basic.showIcon(GameIcons.Pairing)\" numlines=\"1\"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"device_button_event\" id=\"P)aT:6m|wNp!9M|#n%1s\" x=\"625\" y=\"20\"><field name=\"NAME\">Button.AB</field><statement name=\"HANDLER\"><block type=\"controls_if\" id=\"{nPAb,7{?350@TOi:|@F\"><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"L}-Yogylb@K[.bQc`@38\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\" id=\"0`rp8h,d.8Rt}(c%NhZV\"><field name=\"OP\">AND</field><value name=\"A\"><shadow type=\"logic_boolean\" id=\"8i$X*(2g|@.t`Tm/]l+|\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"]a73qAIHCoh_`x9Rc0h^\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\" id=\"S5gQM|USW%yNbHZxg}CO\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" id=\"4j2@#hO(4dnsfb++b]^_\"><field name=\"VAR\" id=\"P@^g+2h|ptqN=GW[rJa)\">state</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\",LrMZ!+umEz;|9VKbAh9\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\" id=\"-#o-,4%Z+(^:i9`n%o_p\"><field name=\"EXPRESSION\">GameState.Stopped</field></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\" id=\"Cp0bTNU,{s*9%uI-ZSJe\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_negate\" id=\"@+x[fKg3kZo-PoCaL5P]\"><value name=\"BOOL\"><shadow type=\"logic_boolean\" id=\"Sqy;gj3h:{i?/~6~Gauh\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" id=\"C@pJCwcIG]A6iIJqfqL/\"><field name=\"VAR\" id=\"oP}b3fLr8k0@q$3Ca48I\">master</field></block></value></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\" id=\"_7D]=7;D}l55P%A.FGpe\"><field name=\"VAR\" id=\"oP}b3fLr8k0@q$3Ca48I\">master</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"[,-_Vfttfl,Xx=szE@kp\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" id=\"/*UXa],=RbOXUC*vqZJ-\"><field name=\"BOOL\">TRUE</field></block></value><next><block type=\"variables_set\" id=\"CiC*jBk_;2VjpM}JphPB\"><field name=\"VAR\" id=\"H|a/qKiI0v-Pli_gFm`G\">paired</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"be2zGvG8IbQE-8a,){b_\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" id=\"/|SUm3hojj0`Zz:gR,q}\"><field name=\"BOOL\">TRUE</field></block></value><next><block type=\"typescript_statement\" id=\"Y*^AAAG[EMo5Te86GC|*\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"state = GameState.Pairing\" numlines=\"1\"></mutation><next><block type=\"serial_writeline\" id=\"^9By[@]5P[m?D.IalUW!\"><value name=\"text\"><shadow type=\"text\" id=\"}/z%~H={F;kGD:9*pBmJ\"><field name=\"TEXT\">registered as master</field></shadow></value><next><block type=\"radio_set_transmit_power\" id=\"cTHqUazcy9$9.A%FOgN4\"><value name=\"power\"><shadow type=\"math_number_minmax\" id=\"b1Aj2cK7R[[E^[3hGXHi\"><mutation min=\"0\" max=\"7\" precision=\"0\"></mutation><field name=\"SLIDER\">7</field></shadow></value><next><block type=\"device_print_message\" id=\"wkz8J9Ptoy)=A]0,U~H/\"><value name=\"text\"><shadow type=\"text\" id=\"pVum0O?e;/1pi^32RQUR\"><field name=\"TEXT\">0</field></shadow></value><next><block type=\"typescript_statement\" id=\"+UnA7Kwo]UBCQX,laGJj\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"return\" numlines=\"1\"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><next><block type=\"controls_if\" id=\"0j|4p^*9#j*{CoZ$8;Jq\"><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"]N`!enC#dY(SP6LMjV3N\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_negate\" id=\"U-E@7)x++y:=_3$Dh?Zf\"><value name=\"BOOL\"><shadow type=\"logic_boolean\" id=\"vFcPt/x+|yf/r!DR))Jj\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" id=\"[V%baDW3=E#/jU?9SKn.\"><field name=\"VAR\" id=\"oP}b3fLr8k0@q$3Ca48I\">master</field></block></value></block></value><statement name=\"DO0\"><block type=\"typescript_statement\" id=\"h.n*mVGLuHV2y?jv_wx%\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"return\" numlines=\"1\"></mutation></block></statement><next><block type=\"controls_if\" id=\"UfuST[kRY2fM:K~M6+au\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"DsR?MCprsAH?vA[Fm^Pb\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"7Zr59?CKQO.UHK`VzqEZ\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\" id=\"}TXsCmB[%FQ4@!,O;IFB\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" id=\"z:,X`WRVA5Skm4Gb@(Jj\"><field name=\"VAR\" id=\"P@^g+2h|ptqN=GW[rJa)\">state</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"ZJs5,iP6J42)SvOP-0Ol\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\" id=\"yt|/Y?Cnui~yS4{!ZEMZ\"><field name=\"EXPRESSION\">GameState.Pairing</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\" id=\"@msg{(gzx-YkmT%TsSj#\"><field name=\"VAR\" id=\"RG(AqB(cgUW+$F)N!?ue\">patientZero</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\",@j1SKJmcw%2VzkUi10G\"><field name=\"NUM\">0</field></shadow><block type=\"lists_index_get\" id=\"h+P23sl%2Qfyi^eJAA|U\"><value name=\"LIST\"><block type=\"variables_get\" id=\"GoA/m,4yxnSW*Uc*iZ})\"><field name=\"VAR\" id=\"f`!EoZzA:%#.T)G3GX@T\">players</field></block></value><value name=\"INDEX\"><shadow type=\"math_number\" id=\":xXBlc(3k425UQU}9J/V\"><field name=\"NUM\">0</field></shadow><block type=\"device_random\" id=\"5-Z2(t,B_KsM2g|jp-Vj\"><value name=\"min\"><shadow type=\"math_number\" id=\"Zbe4j9pU.CeIth:pYN)d\"><field name=\"NUM\">0</field></shadow></value><value name=\"limit\"><block type=\"math_arithmetic\" id=\"$D1gJ%Tm~E^u4dmzn#Ua\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\" id=\"Bu_I?p?XWY,#Ez_a*:c1\"><field name=\"NUM\">0</field></shadow><block type=\"lists_length\" id=\"tSa*gg_K!_4ZWQ+r09~[\"><value name=\"VALUE\"><block type=\"variables_get\" id=\"O(BpDdpC!QR8c21Q8nQo\"><field name=\"VAR\" id=\"f`!EoZzA:%#.T)G3GX@T\">players</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"Wg+W+X:0Cxw}w`Tgz%3(\"><field name=\"NUM\">1</field></shadow></value></block></value></block></value></block></value><next><block type=\"typescript_statement\" id=\"b]!FQABcF^Ho{TKTuu6v\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"state = GameState.Infecting\" numlines=\"1\"></mutation><next><block type=\"serial_writeline\" id=\"lrB/c#bbnT)OYyLD;#b%\"><value name=\"text\"><block type=\"typescript_expression\" id=\"l+0Um9Nr8wFXXOKf:hbE\"><field name=\"EXPRESSION\">`game started ${players.length} players`</field></block></value></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\" id=\"9Ys]ZqiaSIuw58/}f?$n\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"8*rCeAChrTeu5u]3sm?g\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\" id=\"Zoh^?lhJjSV6NyCIX*|6\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" id=\"c]=W6n}f1lOiDU@i(VWd\"><field name=\"VAR\" id=\"P@^g+2h|ptqN=GW[rJa)\">state</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"++dL.Bj^@T:V!xsARuDn\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\" id=\"arNg-bocI7z[;IiSoW%F\"><field name=\"EXPRESSION\">GameState.Running</field></block></value></block></value><statement name=\"DO1\"><block type=\"function_call\" id=\"h_=$jSwi@MY1**yf8^sy\"><mutation name=\"gameOver\" functionid=\"%$xEqi3ds9G6/0j6[Brg\"></mutation></block></statement></block></next></block></next></block></statement></block><block type=\"device_forever\" id=\"U/glP1Ur02=:f_;#qk`~\" x=\"1724\" y=\"20\"><statement name=\"HANDLER\"><block type=\"typescript_statement\" id=\"/sxR]G(yuy}$G:#rl8V.\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let message: Message\" numlines=\"1\" declaredvars=\"message\"></mutation><next><block type=\"controls_if\" id=\"XeWC=D;|xpcK,Y$BC!?h\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"J9brIol}s{Kbr4;y:k3w\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" id=\"T{{Ia,LsYISi)I;+];t,\"><field name=\"VAR\" id=\"oP}b3fLr8k0@q$3Ca48I\">master</field></block></value><statement name=\"DO0\"><block type=\"typescript_statement\" id=\"~%EbR3e4r)DjZvGBAory\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"switch (state) {\" line1=\"            case GameState.Pairing:\" line2=\"                // tell each player they are registered\" line3=\"                for (const t of players) {\" line4=\"                    message = new Message()\" line5=\"                    message.kind = MessageKind.PairConfirmation\" line6=\"                    message.value = t.icon\" line7=\"                    message.toSerialNumber = t.id\" line8=\"                    message.send()\" line9=\"                }\" line10=\"                serial.writeLine(`pairing ${players.length} players`)\" line11=\"                basic.pause(500)\" line12=\"                break\" line13=\"            case GameState.Infecting:\" line14=\"                if (patientZero.health == HealthState.Healthy) {\" line15=\"                    message = new Message()\" line16=\"                    message.kind = MessageKind.InitialInfect\" line17=\"                    message.toSerialNumber = patientZero.id\" line18=\"                    message.send()\" line19=\"                    basic.pause(100)\" line20=\"                } else {\" line21=\"                    serial.writeLine(`patient ${patientZero.id} infected`)\" line22=\"                    // show startup\" line23=\"                    basic.showIcon(GameIcons.Dead)\" line24=\"                    state = GameState.Running\" line25=\"                }\" line26=\"                break\" line27=\"            case GameState.Running:\" line28=\"                for (const u of players) {\" line29=\"                    message = new Message()\" line30=\"                    message.kind = MessageKind.HealthSet\" line31=\"                    message.value = u.health\" line32=\"                    message.toSerialNumber = u.id\" line33=\"                    message.send()\" line34=\"                }\" line35=\"                break\" line36=\"            case GameState.Over:\" line37=\"                if (patientZero)\" line38=\"                    patientZero.show()\" line39=\"                break\" line40=\"        }\" numlines=\"41\"></mutation><next><block type=\"typescript_statement\" id=\"#jgBihCOGb_{v7ARQ?.]\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"message = new Message()\" numlines=\"1\"></mutation><next><block type=\"typescript_statement\" id=\"^5yc1?#5tebFLjQ[AFa]\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"message.kind = MessageKind.GameState\" numlines=\"1\"></mutation><next><block type=\"typescript_statement\" id=\"Jw}^A|}i}khO#J{(09LS\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"message.value = state\" numlines=\"1\"></mutation><next><block type=\"typescript_statement\" id=\"{H9^C7Xy4~!xU~6mky`c\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"message.send()\" numlines=\"1\"></mutation></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"typescript_statement\" id=\"XXMv#x+RXO])G6ao^u@:\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"switch (state) {\" line1=\"            case GameState.Pairing:\" line2=\"                // broadcast player id\" line3=\"                if (playerIcon &lt; 0) {\" line4=\"                    message = new Message()\" line5=\"                    message.kind = MessageKind.PairRequest\" line6=\"                    message.fromSerialNumber = control.deviceSerialNumber()\" line7=\"                    message.send()\" line8=\"                } else if (infectedBy &gt; -1) {\" line9=\"                    message = new Message()\" line10=\"                    message.kind = MessageKind.HealthValue\" line11=\"                    message.fromSerialNumber = control.deviceSerialNumber()\" line12=\"                    message.value = health\" line13=\"                    message.send()\" line14=\"                }\" line15=\"                break\" line16=\"            case GameState.Infecting:\" line17=\"                message = new Message()\" line18=\"                message.kind = MessageKind.HealthValue\" line19=\"                message.fromSerialNumber = control.deviceSerialNumber()\" line20=\"                message.value = health\" line21=\"                message.send()\" line22=\"                break\" line23=\"            case GameState.Running:\" line24=\"                // update health status\" line25=\"                if (health != HealthState.Healthy &amp;&amp; input.runningTime() - infectedTime &gt; DEATH)\" line26=\"                    health = HealthState.Dead\" line27=\"                else if (health != HealthState.Healthy &amp;&amp; input.runningTime() - infectedTime &gt; INCUBATION)\" line28=\"                    health = HealthState.Sick\" line29=\"                // transmit disease\" line30=\"                if (health == HealthState.Incubating || health == HealthState.Sick) {\" line31=\"                    message = new Message()\" line32=\"                    message.kind = MessageKind.TransmitVirus\" line33=\"                    message.fromSerialNumber = control.deviceSerialNumber()\" line34=\"                    message.value = playerIcon\" line35=\"                    message.send()\" line36=\"                }\" line37=\"                message = new Message()\" line38=\"                message.kind = MessageKind.HealthValue\" line39=\"                message.fromSerialNumber = control.deviceSerialNumber()\" line40=\"                message.value = health\" line41=\"                message.send()\" line42=\"                break\" line43=\"        }\" numlines=\"44\"></mutation><next><block type=\"function_call\" id=\"+`Y5L^Vb6D|[=B~wd5fz\"><mutation name=\"gameFace\" functionid=\"yfds0WGM)hAH1m21JaiJ\"></mutation></block></next></block></statement></block></next></block></statement></block><block type=\"radio_on_buffer_drag\" id=\"yIa1[U6IsapdDk.|62fN\" x=\"2749\" y=\"20\"><value name=\"HANDLER_DRAG_PARAM_receivedBuffer\"><block type=\"argument_reporter_custom\" id=\"7dhlSPo]FLKk|(mz|]oy\"><mutation duplicateondrag=\"true\" typename=\"Buffer\"></mutation><field name=\"VALUE\">receivedBuffer</field></block></value><statement name=\"HANDLER\"><block type=\"typescript_statement\" id=\"j!SSQ6Z,ma[Dmrj`t3.L\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"const incomingMessage = new Message(receivedBuffer)\" numlines=\"1\" declaredvars=\"incomingMessage\"></mutation><next><block type=\"variables_set\" id=\"Rd|{1xmnR/aKd9G;i|r]\"><field name=\"VAR\" id=\"jTdk-yz7sjt@1T(v6.F1\">signal</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"|V.MWAoqbLSJi^q(Q9zK\"><field name=\"NUM\">0</field></shadow><block type=\"radio_received_packet\" id=\"7r2H@vqdwfX/mJ:c32J$\"><value name=\"type\"><shadow type=\"radio_packet_property\" id=\"Hg/1__4]9hk7q)[9lwXZ\"><field name=\"note\">RadioPacketProperty.SignalStrength</field></shadow></value></block></value><next><block type=\"controls_if\" id=\"Wj|HAm)10TO$.1;]Kk9N\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"qx*1]^ZS2Sab93{U26mc\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" id=\"W2[~8]YC,_;b2b#_GN8m\"><field name=\"VAR\" id=\"oP}b3fLr8k0@q$3Ca48I\">master</field></block></value><statement name=\"DO0\"><block type=\"typescript_statement\" id=\")@vcoWOFWvH.@F6hH}7i\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"switch (incomingMessage.kind) {\" line1=\"            case MessageKind.PairRequest:\" line2=\"                // register player\" line3=\"                let n = players.length\" line4=\"                player(incomingMessage.fromSerialNumber)\" line5=\"                // show player number if changed\" line6=\"                if (n != players.length) {\" line7=\"                    basic.showNumber(players.length)\" line8=\"                }\" line9=\"                break\" line10=\"            case MessageKind.HealthValue:\" line11=\"                let s = player(incomingMessage.fromSerialNumber)\" line12=\"                s.health = incomingMessage.value\" line13=\"                // check if all infected\" line14=\"                if (allDead())\" line15=\"                    gameOver()\" line16=\"                break\" line17=\"        }\" numlines=\"18\"></mutation></block></statement><statement name=\"ELSE\"><block type=\"typescript_statement\" id=\"8C=I`_=`dC:tl@h9.)I|\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"switch (incomingMessage.kind) {\" line1=\"            case MessageKind.GameState:\" line2=\"                // update game state\" line3=\"                state = incomingMessage.value as GameState\" line4=\"                break\" line5=\"            case MessageKind.InitialInfect:\" line6=\"                if (infectedBy &lt; 0 &amp;&amp;\" line7=\"                    incomingMessage.toSerialNumber == control.deviceSerialNumber()) {\" line8=\"                    // infected by master\" line9=\"                    infectedBy = 0 // infected my master\" line10=\"                    infectedTime = input.runningTime()\" line11=\"                    health = HealthState.Incubating\" line12=\"                    serial.writeLine(`infected ${control.deviceSerialNumber()}`)\" line13=\"                }\" line14=\"                break\" line15=\"            case MessageKind.HealthSet:\" line16=\"                if (incomingMessage.toSerialNumber == control.deviceSerialNumber()) {\" line17=\"                    const newHealth = incomingMessage.value\" line18=\"                    if (health &lt; newHealth) {\" line19=\"                        health = newHealth\" line20=\"                    }\" line21=\"                }\" line22=\"                break\" line23=\"            case MessageKind.PairConfirmation:\" line24=\"                if (!paired &amp;&amp; state == GameState.Pairing &amp;&amp;\" line25=\"                    incomingMessage.toSerialNumber == control.deviceSerialNumber()) {\" line26=\"                    // paired!\" line27=\"                    serial.writeLine(`player paired ==&gt; ${control.deviceSerialNumber()}`)\" line28=\"                    playerIcon = incomingMessage.value\" line29=\"                    paired = true\" line30=\"                }\" line31=\"                break\" line32=\"            case MessageKind.TransmitVirus:\" line33=\"                if (state == GameState.Running) {\" line34=\"                    if (health == HealthState.Healthy) {\" line35=\"                        serial.writeLine(`signal: ${signal}`)\" line36=\"                        if (signal &gt; RSSI &amp;&amp;\" line37=\"                            randint(0, 100) &gt; TRANSMISSIONPROB) {\" line38=\"                            infectedBy = incomingMessage.value\" line39=\"                            infectedTime = input.runningTime()\" line40=\"                            health = HealthState.Incubating\" line41=\"                        }\" line42=\"                    }\" line43=\"                }\" line44=\"                break\" line45=\"            case MessageKind.HealthValue:\" line46=\"                if (health != HealthState.Dead &amp;&amp; signal &gt; RSSI) {\" line47=\"                    game.addScore(1)\" line48=\"                }\" line49=\"                break\" line50=\"        }\" numlines=\"51\"></mutation></block></statement></block></next></block></next></block></statement></block><block type=\"function_definition\" id=\"N8GE|`*kSSWPaQco|Z*M\" x=\"3625\" y=\"20\"><mutation name=\"player\" functionid=\"0P@4j5tJhOkvAtT-tWq;\"><arg name=\"id\" id=\"419tbmxh9xrs4lfdj5yz\" type=\"number\"></arg></mutation><field name=\"function_name\">player</field><comment pinned=\"false\" h=\"80\" w=\"160\">get a player instance (creates one as needed)</comment><value name=\"419tbmxh9xrs4lfdj5yz\"><block type=\"argument_reporter_number\" id=\"wXe+a%b3iogYoKVP8u8g\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">id</field></block></value><statement name=\"STACK\"><block type=\"pxt_controls_for_of\" id=\"*52t3YUfL^vmR{Bh09{p\"><value name=\"VAR\"><block type=\"variables_get_reporter\" id=\"y#m|p$3G_dZ5yyt(R=D%\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"oc6^1kw,kSg6iDRZ.H~s\">p</field></block></value><value name=\"LIST\"><block type=\"variables_get\" id=\"xHVleY^:dNDobs{hvB=!\"><field name=\"VAR\" id=\"f`!EoZzA:%#.T)G3GX@T\">players</field></block></value><statement name=\"DO\"><block type=\"controls_if\" id=\"K_o9yP+UQd#oJ_vl2!2O\"><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"3c3a=2+E{-4-{xLXcO6B\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"DW)1Oc/%eNnp3f@;HRZp\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\" id=\"kWP2_[~4ih+LAgIwKBq9\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\" id=\"X?-%a2qqpiO+C:FGGp!!\"><field name=\"EXPRESSION\">p.id</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"G1QNLj3jq17)(m/1~]n.\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\" id=\"McFZJ14s./_0T/5ri]km\"><field name=\"VALUE\">id</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\" id=\".@H|`9}cDn69RF;m=r?H\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\" id=\"xns$$v]I?7Jo}3iMMn@O\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" id=\"L@x#*+2VehIVDmqMX~On\"><field name=\"VAR\" id=\"oc6^1kw,kSg6iDRZ.H~s\">p</field></block></value></block></statement></block></statement><next><block type=\"typescript_statement\" id=\"nyGFz7k/nJYN]w?StM[V\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"let q = new Player()\" numlines=\"1\" declaredvars=\"q\"></mutation><next><block type=\"typescript_statement\" id=\"*CY00r;:piep+dH7hzl~\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"q.id = id\" numlines=\"1\"></mutation><next><block type=\"typescript_statement\" id=\"6oH*SzC0@j}_^8L*EIO)\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"q.icon = (players.length + 1) % playerIcons.length\" numlines=\"1\"></mutation><next><block type=\"typescript_statement\" id=\"Ug%03e[+zmA,tzVMm}H0\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"q.health = HealthState.Healthy\" numlines=\"1\"></mutation><next><block type=\"array_push\" id=\"KYDl8I,.Nruxb@bY;zw)\"><value name=\"list\"><block type=\"variables_get\" id=\"`a*[R0)-WT^R@S.c.3|g\"><field name=\"VAR\" id=\"f`!EoZzA:%#.T)G3GX@T\">players</field></block></value><value name=\"value\"><block type=\"variables_get\" id=\"fX}.6}ozA6}G51bY4^(J\"><field name=\"VAR\" id=\"s@YD[i(n2^7u+j3`DIR5\">q</field></block></value><next><block type=\"serial_writeline\" id=\"}L[#7F(fiooY-V[+i^Ko\"><value name=\"text\"><block type=\"typescript_expression\" id=\"[fe5L:O@=YlTAvP.X/YP\"><field name=\"EXPRESSION\">`player ==&gt; ${q.id}`</field></block></value><next><block type=\"function_return\" id=\".V}JYwf]#xEl-Lq1uyfG\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\" id=\":/c-uYeHo^Q7srI]8b#6\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" id=\"~1bt`Mnq-@d:e,gI{u-G\"><field name=\"VAR\" id=\"s@YD[i(n2^7u+j3`DIR5\">q</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" id=\".g{p6}oY:/OnUM?hzYh%\" x=\"4142\" y=\"20\"><mutation name=\"allDead\" functionid=\"[AM!cx~{-*1J_57FmpHS\"></mutation><field name=\"function_name\">allDead</field><statement name=\"STACK\"><block type=\"pxt_controls_for_of\" id=\"T^|HDmPipV*Fvm/9Pn6L\"><value name=\"VAR\"><block type=\"variables_get_reporter\" id=\"WAxotf-h};!7InrD{ldM\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VAR\" id=\"tUBVuzMd.-xxO/K[T!x_\">r</field></block></value><value name=\"LIST\"><block type=\"variables_get\" id=\"A#-bvDD=~xcK1TvK*bA.\"><field name=\"VAR\" id=\"f`!EoZzA:%#.T)G3GX@T\">players</field></block></value><statement name=\"DO\"><block type=\"controls_if\" id=\"wh.uo@^BZjy}0jDxCV~r\"><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"sQdGrmySev781er@!7C{\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"11erSWQ7gSlZDpF^uKIh\"><field name=\"OP\">NEQ</field><value name=\"A\"><shadow type=\"math_number\" id=\"T!]q@T?4S-%Z@}W1Fhad\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\" id=\"/G1#i8(RFZJRhDxciV~2\"><field name=\"EXPRESSION\">r.health</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"{)K9=W3;6lItqMBd]!5P\"><field name=\"NUM\">0</field></shadow><block type=\"typescript_expression\" id=\"X!WVYqKaA*Of=!C,T7.G\"><field name=\"EXPRESSION\">HealthState.Dead</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_return\" id=\"}~,Jr(z}8+uHD!gl(6~/\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\" id=\"{PvVo7|#lDwA_jG`5Meo\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" id=\"B#btoTtTy!D?@XxL-sMI\"><field name=\"BOOL\">FALSE</field></block></value></block></statement></block></statement><next><block type=\"function_return\" id=\"O?j5Fh]l3(Z?Jlwtz0WE\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" no_return_value=\"false\"></mutation><value name=\"RETURN_VALUE\"><shadow type=\"math_number\" id=\"x`p:J4`frw+XS!Iv56S:\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" id=\"=G)QOu%j0z|{ev90asg#\"><field name=\"BOOL\">TRUE</field></block></value></block></next></block></statement></block><block type=\"function_definition\" id=\"XrEsse_ve%xKQBLT#,q-\" x=\"4700\" y=\"20\"><mutation name=\"gameOver\" functionid=\"%$xEqi3ds9G6/0j6[Brg\"></mutation><field name=\"function_name\">gameOver</field><statement name=\"STACK\"><block type=\"typescript_statement\" id=\"k%s3k:Bgy_hrNu[r^[DA\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"state = GameState.Over\" numlines=\"1\"></mutation><next><block type=\"controls_if\" id=\"@y*eyjXucr(2A($8e:Zt\"><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"O-Jyv67o1jE/FeW7TDeY\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" id=\"w/0q_Zw)_{Kqgrv3NVy*\"><field name=\"VAR\" id=\"RG(AqB(cgUW+$F)N!?ue\">patientZero</field></block></value><statement name=\"DO0\"><block type=\"typescript_statement\" id=\"VP1{.:,*(*Ql!O~s1W1^\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"patientZero.show()\" numlines=\"1\"></mutation></block></statement></block></next></block></statement></block><block type=\"function_definition\" id=\"RMQGLj_[:REo]SmkfyoZ\" x=\"5017\" y=\"20\"><mutation name=\"gameFace\" functionid=\"yfds0WGM)hAH1m21JaiJ\"></mutation><field name=\"function_name\">gameFace</field><statement name=\"STACK\"><block type=\"typescript_statement\" id=\"8+da]D;X0KR~=k$BQ5|C\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" line0=\"switch (state) {\" line1=\"        case GameState.Stopped:\" line2=\"            basic.showIcon(GameIcons.Pairing)\" line3=\"            break\" line4=\"        case GameState.Pairing:\" line5=\"            if (playerIcon &gt; -1)\" line6=\"                basic.showString(playerIcons[playerIcon])\" line7=\"            else\" line8=\"                basic.showIcon(paired ? GameIcons.Paired : GameIcons.Pairing, 1)\" line9=\"            break\" line10=\"        case GameState.Infecting:\" line11=\"        case GameState.Running:\" line12=\"            switch (health) {\" line13=\"                case HealthState.Dead:\" line14=\"                    basic.showIcon(GameIcons.Dead, 1)\" line15=\"                    break\" line16=\"                case HealthState.Sick:\" line17=\"                    basic.showIcon(GameIcons.Sick, 1)\" line18=\"                    break\" line19=\"                default:\" line20=\"                    basic.showIcon(GameIcons.Healthy, 1)\" line21=\"                    break\" line22=\"            }\" line23=\"            break\" line24=\"        case GameState.Over:\" line25=\"            // show id\" line26=\"            basic.showString(playerIcons[playerIcon])\" line27=\"            basic.pause(2000)\" line28=\"            // show health\" line29=\"            switch (health) {\" line30=\"                case HealthState.Dead:\" line31=\"                    basic.showIcon(GameIcons.Dead, 2000)\" line32=\"                    break\" line33=\"                case HealthState.Sick:\" line34=\"                    basic.showIcon(GameIcons.Sick, 2000)\" line35=\"                    break\" line36=\"                case HealthState.Incubating:\" line37=\"                    basic.showIcon(GameIcons.Incubating, 2000)\" line38=\"                    break\" line39=\"                default:\" line40=\"                    basic.showIcon(GameIcons.Healthy, 2000)\" line41=\"                    break\" line42=\"            }\" line43=\"            // show how infected\" line44=\"            if (infectedBy &gt; -1) {\" line45=\"                basic.showString(&quot; INFECTED BY&quot;)\" line46=\"                basic.showString(playerIcons[infectedBy])\" line47=\"                basic.pause(2000)\" line48=\"            } else {\" line49=\"                basic.showString(&quot; PATIENT ZERO&quot;)\" line50=\"                basic.pause(2000)\" line51=\"            }\" line52=\"            // show score\" line53=\"            game.showScore()\" line54=\"            basic.pause(1000)\" line55=\"            break\" line56=\"    }\" numlines=\"57\"></mutation></block></statement></block>"],[1,"://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n"],[0,"</xm"]],"start1":12,"start2":12,"length1":37517,"length2":113}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/**\n * master state\n */\nfunction allDead () {\n    for (let r of players) {\n        if (r.health != HealthState.Dead) {\n            return false\n        }\n    }\n    return true\n}\nfunction gameFace () {\n    switch (state) {\n        case GameState.Stopped:\n            basic.showIcon(GameIcons.Pairing)\n            break\n        case GameState.Pairing:\n            if (playerIcon > -1)\n                basic.showString(playerIcons[playerIcon])\n            else\n                basic.showIcon(paired ? GameIcons.Paired : GameIcons.Pairing, 1)\n            break\n        case GameState.Infecting:\n        case GameState.Running:\n            switch (health) {\n                case HealthState.Dead:\n                    basic.showIcon(GameIcons.Dead, 1)\n                    break\n                case HealthState.Sick:\n                    basic.showIcon(GameIcons.Sick, 1)\n                    break\n                default:\n                    basic.showIcon(GameIcons.Healthy, 1)\n                    break\n            }\n            break\n        case GameState.Over:\n            // show id\n            basic.showString(playerIcons[playerIcon])\n            basic.pause(2000)\n            // show health\n            switch (health) {\n                case HealthState.Dead:\n                    basic.showIcon(GameIcons.Dead, 2000)\n                    break\n                case HealthState.Sick:\n                    basic.showIcon(GameIcons.Sick, 2000)\n                    break\n                case HealthState.Incubating:\n                    basic.showIcon(GameIcons.Incubating, 2000)\n                    break\n                default:\n                    basic.showIcon(GameIcons.Healthy, 2000)\n                    break\n            }\n            // show how infected\n            if (infectedBy > -1) {\n                basic.showString(\" INFECTED BY\")\n                basic.showString(playerIcons[infectedBy])\n                basic.pause(2000)\n            } else {\n                basic.showString(\" PATIENT ZERO\")\n                basic.pause(2000)\n            }\n            // show score\n            game.showScore()\n            basic.pause(1000)\n            break\n    }\n}\nradio.onReceivedBuffer(function (receivedBuffer) {\n    const incomingMessage = new Message(receivedBuffer)\nsignal = radio.receivedPacket(RadioPacketProperty.SignalStrength)\n    if (master) {\n        switch (incomingMessage.kind) {\n            case MessageKind.PairRequest:\n                // register player\n                let n = players.length\n                player(incomingMessage.fromSerialNumber)\n                // show player number if changed\n                if (n != players.length) {\n                    basic.showNumber(players.length)\n                }\n                break\n            case MessageKind.HealthValue:\n                let s = player(incomingMessage.fromSerialNumber)\n                s.health = incomingMessage.value\n                // check if all infected\n                if (allDead())\n                    gameOver()\n                break\n        }\n    } else {\n        switch (incomingMessage.kind) {\n            case MessageKind.GameState:\n                // update game state\n                state = incomingMessage.value as GameState\n                break\n            case MessageKind.InitialInfect:\n                if (infectedBy < 0 &&\n                    incomingMessage.toSerialNumber == control.deviceSerialNumber()) {\n                    // infected by master\n                    infectedBy = 0 // infected my master\n                    infectedTime = input.runningTime()\n                    health = HealthState.Incubating\n                    serial.writeLine(`infected ${control.deviceSerialNumber()}`)\n                }\n                break\n            case MessageKind.HealthSet:\n                if (incomingMessage.toSerialNumber == control.deviceSerialNumber()) {\n                    const newHealth = incomingMessage.value\n                    if (health < newHealth) {\n                        health = newHealth\n                    }\n                }\n                break\n            case MessageKind.PairConfirmation:\n                if (!paired && state == GameState.Pairing &&\n                    incomingMessage.toSerialNumber == control.deviceSerialNumber()) {\n                    // paired!\n                    serial.writeLine(`player paired ==> ${control.deviceSerialNumber()}`)\n                    playerIcon = incomingMessage.value\n                    paired = true\n                }\n                break\n            case MessageKind.TransmitVirus:\n                if (state == GameState.Running) {\n                    if (health == HealthState.Healthy) {\n                        serial.writeLine(`signal: ${signal}`)\n                        if (signal > RSSI &&\n                            randint(0, 100) > TRANSMISSIONPROB) {\n                            infectedBy = incomingMessage.value\n                            infectedTime = input.runningTime()\n                            health = HealthState.Incubating\n                        }\n                    }\n                }\n                break\n            case MessageKind.HealthValue:\n                if (health != HealthState.Dead && signal > RSSI) {\n                    game.addScore(1)\n                }\n                break\n        }\n    }\n})\nfunction gameOver () {\n    state = GameState.Over\nif (patientZero) {\n        patientZero.show()\n    }\n}\ninput.onButtonPressed(Button.AB, function () {\n    if (state == GameState.Stopped && !(master)) {\n        master = true\n        paired = true\n        state = GameState.Pairing\nserial.writeLine(\"registered as master\")\n        radio.setTransmitPower(7)\n        basic.showString(\"0\")\n        return\n    }\n    if (!(master)) {\n        return\n    }\n    if (state == GameState.Pairing) {\n        patientZero = players[randint(0, players.length - 1)]\n        state = GameState.Infecting\nserial.writeLine(\"\" + (`game started ${players.length} players`))\n    } else if (state == GameState.Running) {\n        gameOver()\n    }\n})\n// get a player instance (creates one as needed)\nfunction player (id: number) {\n    for (let p of players) {\n        if (p.id == id) {\n            return p\n        }\n    }\n    let q = new Player()\nq.id = id\nq.icon = (players.length + 1) % playerIcons.length\nq.health = HealthState.Healthy\nplayers.push(q)\n    serial.writeLine(\"\" + (`player ==> ${q.id}`))\n    return q\n}\nlet master = false\nlet signal = 0\n// local time when infection happened\nlet infectedTime = 0\n// player state\nlet paired = false\nlet players: Player[] = []\n// time before showing symptoms\nlet INCUBATION = 20000\n// time before dying off the disease\nlet DEATH = 40000\n// db\nlet RSSI = -45\n// % probability to transfer disease\nlet TRANSMISSIONPROB = 40\nenum GameState {\n    Stopped,\n    Pairing,\n    Infecting,\n    Running,\n    Over\n}\nenum HealthState {\n    Healthy,\n    Incubating,\n    Sick,\n    Dead\n}\nenum MessageKind {\n    PairRequest,\n    PairConfirmation,\n    HealthSet,\n    HealthValue,\n    InitialInfect,\n    TransmitVirus,\n    GameState\n}\nconst GameIcons = {\n    Pairing: IconNames.Ghost,\n    Paired: IconNames.Happy,\n    Dead: IconNames.Skull,\n    Sick: IconNames.Sad,\n    Incubating: IconNames.Confused,\n    Healthy: IconNames.Happy\n}\nclass Message {\n\n    private _data: Buffer\n\n    constructor(input?: Buffer) {\n        this._data = input || control.createBuffer(13)\n    }\n\n    get kind(): number {\n        return this._data.getNumber(NumberFormat.Int8LE, 0)\n    }\n\n    set kind(x: number) {\n        this._data.setNumber(NumberFormat.Int8LE, 0, x)\n    }\n\n    get fromSerialNumber(): number {\n        return this._data.getNumber(NumberFormat.Int32LE, 1)\n    }\n\n    set fromSerialNumber(x: number) {\n        this._data.setNumber(NumberFormat.Int32LE, 1, x)\n    }\n\n    get value(): number {\n        return this._data.getNumber(NumberFormat.Int32LE, 5)\n    }\n\n    set value(x: number) {\n        this._data.setNumber(NumberFormat.Int32LE, 5, x)\n    }\n\n    get toSerialNumber(): number {\n        return this._data.getNumber(NumberFormat.Int32LE, 9)\n    }\n\n    set toSerialNumber(x: number) {\n        this._data.setNumber(NumberFormat.Int32LE, 9, x)\n    }\n\n    send() {\n        radio.sendBuffer(this._data)\n        basic.pause(250)\n    }\n}\nlet playerIcons = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nclass Player {\n    id: number\n    icon: number\n    health: HealthState\n    show() {\n        basic.showString(playerIcons[this.icon])\n    }\n}\nlet state = GameState.Stopped\nlet patientZero: Player\n// who infected (playerIcon)\nlet infectedBy = -1\n// player icon and identity\nlet playerIcon = -1\nlet health = HealthState.Healthy\nradio.setGroup(42)\nbasic.showIcon(GameIcons.Pairing)\nbasic.forever(function () {\n    let message: Message\nif (master) {\n        switch (state) {\n            case GameState.Pairing:\n                // tell each player they are registered\n                for (const t of players) {\n                    message = new Message()\n                    message.kind = MessageKind.PairConfirmation\n                    message.value = t.icon\n                    message.toSerialNumber = t.id\n                    message.send()\n                }\n                serial.writeLine(`pairing ${players.length} players`)\n                basic.pause(500)\n                break\n            case GameState.Infecting:\n                if (patientZero.health == HealthState.Healthy) {\n                    message = new Message()\n                    message.kind = MessageKind.InitialInfect\n                    message.toSerialNumber = patientZero.id\n                    message.send()\n                    basic.pause(100)\n                } else {\n                    serial.writeLine(`patient ${patientZero.id} infected`)\n                    // show startup\n                    basic.showIcon(GameIcons.Dead)\n                    state = GameState.Running\n                }\n                break\n            case GameState.Running:\n                for (const u of players) {\n                    message = new Message()\n                    message.kind = MessageKind.HealthSet\n                    message.value = u.health\n                    message.toSerialNumber = u.id\n                    message.send()\n                }\n                break\n            case GameState.Over:\n                if (patientZero)\n                    patientZero.show()\n                break\n        }\nmessage = new Message()\nmessage.kind = MessageKind.GameState\nmessage.value = state\nmessage.send()\n    } else {\n        switch (state) {\n            case GameState.Pairing:\n                // broadcast player id\n                if (playerIcon < 0) {\n                    message = new Message()\n                    message.kind = MessageKind.PairRequest\n                    message.fromSerialNumber = control.deviceSerialNumber()\n                    message.send()\n                } else if (infectedBy > -1) {\n                    message = new Message()\n                    message.kind = MessageKind.HealthValue\n                    message.fromSerialNumber = control.deviceSerialNumber()\n                    message.value = health\n                    message.send()\n                }\n                break\n            case GameState.Infecting:\n                message = new Message()\n                message.kind = MessageKind.HealthValue\n                message.fromSerialNumber = control.deviceSerialNumber()\n                message.value = health\n                message.send()\n                break\n            case GameState.Running:\n                // update health status\n                if (health != HealthState.Healthy && input.runningTime() - infectedTime > DEATH)\n                    health = HealthState.Dead\n                else if (health != HealthState.Healthy && input.runningTime() - infectedTime > INCUBATION)\n                    health = HealthState.Sick\n                // transmit disease\n                if (health == HealthState.Incubating || health == HealthState.Sick) {\n                    message = new Message()\n                    message.kind = MessageKind.TransmitVirus\n                    message.fromSerialNumber = control.deviceSerialNumber()\n                    message.value = playerIcon\n                    message.send()\n                }\n                message = new Message()\n                message.kind = MessageKind.HealthValue\n                message.fromSerialNumber = control.deviceSerialNumber()\n                message.value = health\n                message.send()\n                break\n        }\ngameFace()\n    }\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":12568,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":232,"start2":232,"length1":80,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1744824708498,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Infected\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1744824878849}