<xml xmlns="https://developers.google.com/blockly/xml"><variables><variable id="Pq[hVX?I^fnJ|kRxce:C">players</variable><variable id="rd#q!IN6x?v1K=w:weZA">r</variable><variable id="9n4fS|4OL*y{2yTuLoM/">signal</variable><variable id="lZq|;BZG)T!DS9wp}4S0">master</variable><variable id="Q]ry3ET7P%0c1X{[7bZh">patientZero</variable><variable id="M9dOt4hvGShl2FeOXQ[5">state</variable><variable id="umm{Lp5GB(FHfPzsCa7Y">paired</variable><variable id=":hpf1|Bb;QS6b?bF||0Z">p</variable><variable id="KZb_hS6g#,bc2;!I;00n">q</variable><variable id="0hJEL;AG%Zr0m)0Z.o`+">INCUBATION</variable><variable id="wEI-2O2u;ism0|rO%b#B">DEATH</variable><variable id="UoiJ+iH#~_JIOUoP5w5|">RSSI</variable><variable id="s5LI*_Ljt]f-/-d$@A3P">TRANSMISSIONPROB</variable><variable id="n%va{7F+:Klo6Tz@D:$)">playerIcons</variable><variable id="9?j_JYi^S25rL80wN4Ap">infectedBy</variable><variable id="KH.;#godU04R8z|VIl^5">playerIcon</variable></variables><block type="function_definition" x="10" y="10"><mutation name="allDead" functionid="^Ta4}SejJ!k0PE6_a#-|"></mutation><field name="function_name">allDead</field><statement name="STACK"><block type="pxt_controls_for_of"><value name="VAR"><block type="variables_get_reporter"><mutation duplicateondrag="true"></mutation><field name="VAR" id="rd#q!IN6x?v1K=w:weZA">r</field></block></value><value name="LIST"><block type="variables_get"><field name="VAR" id="Pq[hVX?I^fnJ|kRxce:C">players</field></block></value><statement name="DO"><block type="controls_if"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare"><field name="OP">NEQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression"><field name="EXPRESSION">r.health</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression"><field name="EXPRESSION">HealthState.Dead</field></block></value></block></value><statement name="DO0"><block type="function_return"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean"><field name="BOOL">FALSE</field></block></value></block></statement></block></statement><next><block type="function_return"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean"><field name="BOOL">TRUE</field></block></value></block></next></block></statement></block><block type="function_definition" x="10" y="10"><mutation name="gameFace" functionid="sDyg]Z3my}Vz};L/JAd7"></mutation><field name="function_name">gameFace</field><statement name="STACK"><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (state) {" line1="        case GameState.Stopped:" line2="            basic.showIcon(GameIcons.Pairing)" line3="            break" line4="        case GameState.Pairing:" line5="            if (playerIcon &gt; -1)" line6="                basic.showString(playerIcons[playerIcon])" line7="            else" line8="                basic.showIcon(paired ? GameIcons.Paired : GameIcons.Pairing, 1)" line9="            break" line10="        case GameState.Infecting:" line11="        case GameState.Running:" line12="            switch (health) {" line13="                case HealthState.Dead:" line14="                    basic.showIcon(GameIcons.Dead, 1)" line15="                    break" line16="                case HealthState.Sick:" line17="                    basic.showIcon(GameIcons.Sick, 1)" line18="                    break" line19="                default:" line20="                    basic.showIcon(GameIcons.Healthy, 1)" line21="                    break" line22="            }" line23="            break" line24="        case GameState.Over:" line25="            basic.showString(playerIcons[playerIcon])" line26="            basic.pause(2000)" line27="            switch (health) {" line28="                case HealthState.Dead:" line29="                    basic.showIcon(GameIcons.Dead, 2000)" line30="                    break" line31="                case HealthState.Sick:" line32="                    basic.showIcon(GameIcons.Sick, 2000)" line33="                    break" line34="                case HealthState.Incubating:" line35="                    basic.showIcon(GameIcons.Incubating, 2000)" line36="                    break" line37="                default:" line38="                    basic.showIcon(GameIcons.Healthy, 2000)" line39="                    break" line40="            }" line41="            if (infectedBy &gt; -1) {" line42="                basic.showString(&quot; INFECTED BY&quot;)" line43="                basic.showString(playerIcons[infectedBy])" line44="                basic.pause(2000)" line45="            } else {" line46="                basic.showString(&quot; PATIENT ZERO&quot;)" line47="                basic.pause(2000)" line48="            }" line49="            game.showScore()" line50="            basic.pause(1000)" line51="            break" line52="    }" numlines="53"></mutation></block></statement></block><block type="radio_on_buffer_drag" x="10" y="10"><value name="HANDLER_DRAG_PARAM_receivedBuffer"><block type="argument_reporter_custom"><mutation duplicateondrag="true" typename="Buffer"></mutation><field name="VALUE">receivedBuffer</field></block></value><statement name="HANDLER"><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const incomingMessage = new Message(receivedBuffer)" numlines="1" declaredvars="incomingMessage"></mutation><next><block type="variables_set"><field name="VAR" id="9n4fS|4OL*y{2yTuLoM/">signal</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="radio_received_packet"><value name="type"><shadow type="radio_packet_property"><field name="note">RadioPacketProperty.SignalStrength</field></shadow></value></block></value><next><block type="controls_if"><mutation else="1"></mutation><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get"><field name="VAR" id="lZq|;BZG)T!DS9wp}4S0">master</field></block></value><statement name="DO0"><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (incomingMessage.kind) {" line1="            case MessageKind.PairRequest:" line2="                let n = players.length" line3="                player(incomingMessage.fromSerialNumber)" line4="                if (n != players.length) {" line5="                    basic.showNumber(players.length)" line6="                }" line7="                break" line8="            case MessageKind.HealthValue:" line9="                let s = player(incomingMessage.fromSerialNumber)" line10="                s.health = incomingMessage.value" line11="                if (allDead())" line12="                    gameOver()" line13="                break" line14="        }" numlines="15"></mutation></block></statement><statement name="ELSE"><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (incomingMessage.kind) {" line1="            case MessageKind.GameState:" line2="                state = incomingMessage.value as GameState" line3="                break" line4="            case MessageKind.InitialInfect:" line5="                if (infectedBy &lt; 0 &amp;&amp;" line6="                    incomingMessage.toSerialNumber == control.deviceSerialNumber()) {" line7="                    infectedBy = 0" line8="                    infectedTime = input.runningTime()" line9="                    health = HealthState.Incubating" line10="                    serial.writeLine(`infected ${control.deviceSerialNumber()}`)" line11="                }" line12="                break" line13="            case MessageKind.HealthSet:" line14="                if (incomingMessage.toSerialNumber == control.deviceSerialNumber()) {" line15="                    const newHealth = incomingMessage.value" line16="                    if (health &lt; newHealth) {" line17="                        health = newHealth" line18="                    }" line19="                }" line20="                break" line21="            case MessageKind.PairConfirmation:" line22="                if (!paired &amp;&amp; state == GameState.Pairing &amp;&amp;" line23="                    incomingMessage.toSerialNumber == control.deviceSerialNumber()) {" line24="                    serial.writeLine(`player paired ==&gt; ${control.deviceSerialNumber()}`)" line25="                    playerIcon = incomingMessage.value" line26="                    paired = true" line27="                }" line28="                break" line29="            case MessageKind.TransmitVirus:" line30="                if (state == GameState.Running) {" line31="                    if (health == HealthState.Healthy) {" line32="                        serial.writeLine(`signal: ${signal}`)" line33="                        if (signal &gt; RSSI &amp;&amp;" line34="                            randint(0, 100) &gt; TRANSMISSIONPROB) {" line35="                            infectedBy = incomingMessage.value" line36="                            infectedTime = input.runningTime()" line37="                            health = HealthState.Incubating" line38="                        }" line39="                    }" line40="                }" line41="                break" line42="            case MessageKind.HealthValue:" line43="                if (health != HealthState.Dead &amp;&amp; signal &gt; RSSI) {" line44="                    game.addScore(1)" line45="                }" line46="                break" line47="        }" numlines="48"></mutation></block></statement></block></next></block></next></block></statement></block><block type="function_definition" x="10" y="10"><mutation name="gameOver" functionid="Gcn/dD;9q#]|G;LF|7HS"></mutation><field name="function_name">gameOver</field><statement name="STACK"><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="state = GameState.Over" numlines="1"></mutation><next><block type="controls_if"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get"><field name="VAR" id="Q]ry3ET7P%0c1X{[7bZh">patientZero</field></block></value><statement name="DO0"><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="patientZero.show()" numlines="1"></mutation></block></statement></block></next></block></statement></block><block type="device_button_event" x="10" y="10"><field name="NAME">Button.AB</field><statement name="HANDLER"><block type="controls_if"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_operation"><field name="OP">AND</field><value name="A"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get"><field name="VAR" id="M9dOt4hvGShl2FeOXQ[5">state</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression"><field name="EXPRESSION">GameState.Stopped</field></block></value></block></value><value name="B"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_negate"><value name="BOOL"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get"><field name="VAR" id="lZq|;BZG)T!DS9wp}4S0">master</field></block></value></block></value></block></value><statement name="DO0"><block type="variables_set"><field name="VAR" id="lZq|;BZG)T!DS9wp}4S0">master</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean"><field name="BOOL">TRUE</field></block></value><next><block type="variables_set"><field name="VAR" id="umm{Lp5GB(FHfPzsCa7Y">paired</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="logic_boolean"><field name="BOOL">TRUE</field></block></value><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="state = GameState.Pairing" numlines="1"></mutation><next><block type="serial_writeline"><value name="text"><shadow type="text"><field name="TEXT">registered as master</field></shadow></value><next><block type="radio_set_transmit_power"><value name="power"><shadow type="math_number_minmax"><mutation min="0" max="7" precision="0"></mutation><field name="SLIDER">7</field></shadow></value><next><block type="device_print_message"><value name="text"><shadow type="text"><field name="TEXT">0</field></shadow></value><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="return" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><next><block type="controls_if"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_negate"><value name="BOOL"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get"><field name="VAR" id="lZq|;BZG)T!DS9wp}4S0">master</field></block></value></block></value><statement name="DO0"><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="return" numlines="1"></mutation></block></statement><next><block type="controls_if"><mutation elseif="1"></mutation><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get"><field name="VAR" id="M9dOt4hvGShl2FeOXQ[5">state</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression"><field name="EXPRESSION">GameState.Pairing</field></block></value></block></value><statement name="DO0"><block type="variables_set"><field name="VAR" id="Q]ry3ET7P%0c1X{[7bZh">patientZero</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_index_get"><value name="LIST"><block type="variables_get"><field name="VAR" id="Pq[hVX?I^fnJ|kRxce:C">players</field></block></value><value name="INDEX"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="device_random"><value name="min"><shadow type="math_number"><field name="NUM">0</field></shadow></value><value name="limit"><block type="math_arithmetic"><field name="OP">MINUS</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="lists_length"><value name="VALUE"><block type="variables_get"><field name="VAR" id="Pq[hVX?I^fnJ|kRxce:C">players</field></block></value></block></value><value name="B"><shadow type="math_number"><field name="NUM">1</field></shadow></value></block></value></block></value></block></value><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="state = GameState.Infecting" numlines="1"></mutation><next><block type="serial_writeline"><value name="text"><shadow type="text"><field name="TEXT"></field></shadow><block type="typescript_expression"><field name="EXPRESSION">(`game started ${players.length} players`)</field></block></value></block></next></block></next></block></statement><value name="IF1"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get"><field name="VAR" id="M9dOt4hvGShl2FeOXQ[5">state</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression"><field name="EXPRESSION">GameState.Running</field></block></value></block></value><statement name="DO1"><block type="function_call"><mutation name="gameOver" functionid="Gcn/dD;9q#]|G;LF|7HS"></mutation></block></statement></block></next></block></next></block></statement></block><block type="function_definition" x="10" y="10"><mutation name="player" functionid="ns(kMhW7R;Y.Bt/;oz^@"><arg name="id" id="l2cbdrz7psumc8cw4oqf7" type="number"></arg></mutation><field name="function_name">player</field><value name="l2cbdrz7psumc8cw4oqf7"><block type="argument_reporter_number"><mutation duplicateondrag="true"></mutation><field name="VALUE">id</field></block></value><statement name="STACK"><block type="pxt_controls_for_of"><value name="VAR"><block type="variables_get_reporter"><mutation duplicateondrag="true"></mutation><field name="VAR" id=":hpf1|Bb;QS6b?bF||0Z">p</field></block></value><value name="LIST"><block type="variables_get"><field name="VAR" id="Pq[hVX?I^fnJ|kRxce:C">players</field></block></value><statement name="DO"><block type="controls_if"><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="logic_compare"><field name="OP">EQ</field><value name="A"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="typescript_expression"><field name="EXPRESSION">p.id</field></block></value><value name="B"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="argument_reporter_number"><field name="VALUE">id</field></block></value></block></value><statement name="DO0"><block type="function_return"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get"><field name="VAR" id=":hpf1|Bb;QS6b?bF||0Z">p</field></block></value></block></statement></block></statement><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let q = new Player()" numlines="1" declaredvars="q"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="q.id = id" numlines="1"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="q.icon = (players.length + 1) % playerIcons.length" numlines="1"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="q.health = HealthState.Healthy" numlines="1"></mutation><next><block type="array_push"><value name="list"><block type="variables_get"><field name="VAR" id="Pq[hVX?I^fnJ|kRxce:C">players</field></block></value><value name="value"><block type="variables_get"><field name="VAR" id="KZb_hS6g#,bc2;!I;00n">q</field></block></value><next><block type="serial_writeline"><value name="text"><shadow type="text"><field name="TEXT"></field></shadow><block type="typescript_expression"><field name="EXPRESSION">(`player ==&gt; ${q.id}`)</field></block></value><next><block type="function_return"><mutation xmlns="http://www.w3.org/1999/xhtml" no_return_value="false"></mutation><value name="RETURN_VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="variables_get"><field name="VAR" id="KZb_hS6g#,bc2;!I;00n">q</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type="device_forever" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let message: Message" numlines="1" declaredvars="message"></mutation><next><block type="controls_if"><mutation else="1"></mutation><value name="IF0"><shadow type="logic_boolean"><field name="BOOL">TRUE</field></shadow><block type="variables_get"><field name="VAR" id="lZq|;BZG)T!DS9wp}4S0">master</field></block></value><statement name="DO0"><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (state) {" line1="            case GameState.Pairing:" line2="                for (const t of players) {" line3="                    message = new Message()" line4="                    message.kind = MessageKind.PairConfirmation" line5="                    message.value = t.icon" line6="                    message.toSerialNumber = t.id" line7="                    message.send()" line8="                }" line9="                serial.writeLine(`pairing ${players.length} players`)" line10="                basic.pause(500)" line11="                break" line12="            case GameState.Infecting:" line13="                if (patientZero.health == HealthState.Healthy) {" line14="                    message = new Message()" line15="                    message.kind = MessageKind.InitialInfect" line16="                    message.toSerialNumber = patientZero.id" line17="                    message.send()" line18="                    basic.pause(100)" line19="                } else {" line20="                    serial.writeLine(`patient ${patientZero.id} infected`)" line21="                    basic.showIcon(GameIcons.Dead)" line22="                    state = GameState.Running" line23="                }" line24="                break" line25="            case GameState.Running:" line26="                for (const u of players) {" line27="                    message = new Message()" line28="                    message.kind = MessageKind.HealthSet" line29="                    message.value = u.health" line30="                    message.toSerialNumber = u.id" line31="                    message.send()" line32="                }" line33="                break" line34="            case GameState.Over:" line35="                if (patientZero)" line36="                    patientZero.show()" line37="                break" line38="        }" numlines="39"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="message = new Message()" numlines="1"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="message.kind = MessageKind.GameState" numlines="1"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="message.value = state" numlines="1"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="message.send()" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></statement><statement name="ELSE"><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="switch (state) {" line1="            case GameState.Pairing:" line2="                if (playerIcon &lt; 0) {" line3="                    message = new Message()" line4="                    message.kind = MessageKind.PairRequest" line5="                    message.fromSerialNumber = control.deviceSerialNumber()" line6="                    message.send()" line7="                } else if (infectedBy &gt; -1) {" line8="                    message = new Message()" line9="                    message.kind = MessageKind.HealthValue" line10="                    message.fromSerialNumber = control.deviceSerialNumber()" line11="                    message.value = health" line12="                    message.send()" line13="                }" line14="                break" line15="            case GameState.Infecting:" line16="                message = new Message()" line17="                message.kind = MessageKind.HealthValue" line18="                message.fromSerialNumber = control.deviceSerialNumber()" line19="                message.value = health" line20="                message.send()" line21="                break" line22="            case GameState.Running:" line23="                if (health != HealthState.Healthy &amp;&amp; input.runningTime() - infectedTime &gt; DEATH)" line24="                    health = HealthState.Dead" line25="                else if (health != HealthState.Healthy &amp;&amp; input.runningTime() - infectedTime &gt; INCUBATION)" line26="                    health = HealthState.Sick" line27="                if (health == HealthState.Incubating || health == HealthState.Sick) {" line28="                    message = new Message()" line29="                    message.kind = MessageKind.TransmitVirus" line30="                    message.fromSerialNumber = control.deviceSerialNumber()" line31="                    message.value = playerIcon" line32="                    message.send()" line33="                }" line34="                message = new Message()" line35="                message.kind = MessageKind.HealthValue" line36="                message.fromSerialNumber = control.deviceSerialNumber()" line37="                message.value = health" line38="                message.send()" line39="                break" line40="        }" numlines="41"></mutation><next><block type="function_call"><mutation name="gameFace" functionid="sDyg]Z3my}Vz};L/JAd7"></mutation></block></next></block></statement></block></next></block></statement></block><block type="pxt-on-start" x="10" y="10"><statement name="HANDLER"><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let players: Player[] = []" numlines="1" declaredvars="players"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let paired = false" numlines="1" declaredvars="paired"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let infectedTime = 0" numlines="1" declaredvars="infectedTime"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let signal = 0" numlines="1" declaredvars="signal"></mutation><next><block type="variables_set"><field name="VAR" id="0hJEL;AG%Zr0m)0Z.o`+">INCUBATION</field><value name="VALUE"><shadow type="math_number"><field name="NUM">20000</field></shadow></value><next><block type="variables_set"><field name="VAR" id="wEI-2O2u;ism0|rO%b#B">DEATH</field><value name="VALUE"><shadow type="math_number"><field name="NUM">40000</field></shadow></value><next><block type="variables_set"><field name="VAR" id="UoiJ+iH#~_JIOUoP5w5|">RSSI</field><value name="VALUE"><shadow type="math_number"><field name="NUM">-45</field></shadow></value><next><block type="variables_set"><field name="VAR" id="s5LI*_Ljt]f-/-d$@A3P">TRANSMISSIONPROB</field><value name="VALUE"><shadow type="math_number"><field name="NUM">40</field></shadow></value><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum GameState {" line1="    Stopped," line2="    Pairing," line3="    Infecting," line4="    Running," line5="    Over" line6="}" numlines="7"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum HealthState {" line1="    Healthy," line2="    Incubating," line3="    Sick," line4="    Dead" line5="}" numlines="6"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum MessageKind {" line1="    PairRequest," line2="    PairConfirmation," line3="    HealthSet," line4="    HealthValue," line5="    InitialInfect," line6="    TransmitVirus," line7="    GameState" line8="}" numlines="9"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="const GameIcons = {" line1="    Pairing: IconNames.Ghost," line2="    Paired: IconNames.Happy," line3="    Dead: IconNames.Skull," line4="    Sick: IconNames.Sad," line5="    Incubating: IconNames.Confused," line6="    Healthy: IconNames.Happy" line7="}" numlines="8" declaredvars="GameIcons"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Message {" line1="" line2="    private _data: Buffer" line3="" line4="    constructor(input?: Buffer) {" line5="        this._data = input || control.createBuffer(13)" line6="    }" line7="" line8="    get kind(): number {" line9="        return this._data.getNumber(NumberFormat.Int8LE, 0)" line10="    }" line11="" line12="    set kind(x: number) {" line13="        this._data.setNumber(NumberFormat.Int8LE, 0, x)" line14="    }" line15="" line16="    get fromSerialNumber(): number {" line17="        return this._data.getNumber(NumberFormat.Int32LE, 1)" line18="    }" line19="" line20="    set fromSerialNumber(x: number) {" line21="        this._data.setNumber(NumberFormat.Int32LE, 1, x)" line22="    }" line23="" line24="    get value(): number {" line25="        return this._data.getNumber(NumberFormat.Int32LE, 5)" line26="    }" line27="" line28="    set value(x: number) {" line29="        this._data.setNumber(NumberFormat.Int32LE, 5, x)" line30="    }" line31="" line32="    get toSerialNumber(): number {" line33="        return this._data.getNumber(NumberFormat.Int32LE, 9)" line34="    }" line35="" line36="    set toSerialNumber(x: number) {" line37="        this._data.setNumber(NumberFormat.Int32LE, 9, x)" line38="    }" line39="" line40="    send() {" line41="        radio.sendBuffer(this._data)" line42="        basic.pause(250)" line43="    }" line44="}" numlines="45"></mutation><next><block type="variables_set"><field name="VAR" id="n%va{7F+:Klo6Tz@D:$)">playerIcons</field><value name="VALUE"><shadow type="math_number"><field name="NUM">0</field></shadow><block type="text"><field name="TEXT">ABCDEFGHIJKLMNOPQRSTUVWXYZ</field></block></value><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Player {" line1="    id: number" line2="    icon: number" line3="    health: HealthState" line4="    show() {" line5="        basic.showString(playerIcons[this.icon])" line6="    }" line7="}" numlines="8"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let state = GameState.Stopped" numlines="1" declaredvars="state"></mutation><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let patientZero: Player" numlines="1" declaredvars="patientZero"></mutation><next><block type="variables_set"><field name="VAR" id="9?j_JYi^S25rL80wN4Ap">infectedBy</field><value name="VALUE"><shadow type="math_number"><field name="NUM">-1</field></shadow></value><next><block type="variables_set"><field name="VAR" id="KH.;#godU04R8z|VIl^5">playerIcon</field><value name="VALUE"><shadow type="math_number"><field name="NUM">-1</field></shadow></value><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="let health = HealthState.Healthy" numlines="1" declaredvars="health"></mutation><next><block type="radio_set_group"><value name="ID"><shadow type="math_number_minmax"><mutation min="0" max="255" precision="0"></mutation><field name="SLIDER">42</field></shadow></value><next><block type="typescript_statement"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="basic.showIcon(GameIcons.Pairing)" numlines="1"></mutation></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>